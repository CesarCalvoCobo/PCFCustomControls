'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*  weak */


var _unitlessCssProperty = require('unitless-css-property');

var _unitlessCssProperty2 = _interopRequireDefault(_unitlessCssProperty);

var _warning = require('../utils/warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addUnitIfNeeded(property, value, unit) {
  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  /* eslint-disable eqeqeq */
  if (valueType === 'number' || valueType === 'string' && value == parseFloat(value)) {
    value += unit;
  }
  /* eslint-enable */
  return value;
}

function addUnit(style, unit, propertyMap) {
  var _loop = function _loop(property) {
    if (!(0, _unitlessCssProperty2.default)(property)) {
      (function () {
        var cssValue = style[property];
        var propertyUnit = propertyMap[property] || unit;
        if (Array.isArray(cssValue)) {
          style[property] = cssValue.map(function (val) {
            return addUnitIfNeeded(property, val, propertyUnit);
          });
        } else if (cssValue instanceof Object) {
          style[property] = addUnit(cssValue, unit, propertyMap);
        } else {
          style[property] = addUnitIfNeeded(property, cssValue, propertyUnit);
        }
      })();
    }
  };

  for (var property in style) {
    _loop(property);
  }

  return style;
}

exports.default = function () {
  var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
  var propertyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  process.env.NODE_ENV !== "production" ? (0, _warning2.default)(unit.match(/ch|em|ex|rem|vh|vw|vmin|vmax|px|cm|mm|in|pc|pt|mozmm|%/) !== null, 'You are using an invalid unit `' + unit + '`.\n    Consider using one of the following ch, em, ex, rem, vh, vw, vmin, vmax, px, cm, mm, in, pc, pt, mozmm or %.') : void 0;

  return function (style) {
    return addUnit(style, unit, propertyMap);
  };
};

module.exports = exports['default'];