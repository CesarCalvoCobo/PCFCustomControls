"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
let diagnosticMessages = {};
function configureLocale(config) {
    return __awaiter(this, void 0, void 0, function* () {
        if (config.directory === '') {
            return Promise.reject('E_Unspecified_Directory');
        }
        if (config.diagnosticFileName === '') {
            return Promise.reject('E_Unspecified_Diagnostic_FileName');
        }
        if (config.locale === '') {
            return Promise.reject('E_Unspecified_Locale');
        }
        if (config.runtime !== 'node' && config.runtime !== 'browser') {
            return Promise.reject('E_Unsupported_Runtime');
        }
        const matchResult = /^([a-z]+)([_\-]([a-z]+))?$/.exec(config.locale.toLowerCase());
        if (!matchResult) {
            return Promise.reject('E_Unsupported_Locale');
        }
        const language = matchResult[1];
        const territory = matchResult[3];
        let result = yield trySetLanguageAndTerritory(config, language, territory);
        if (!result) {
            // Fallback to language only
            result = yield trySetLanguageAndTerritory(config, language, undefined);
        }
        if (!result) {
            // Fallback to en
            result = yield trySetLanguageAndTerritory(config, 'en', undefined);
        }
        if (!result) {
            return Promise.reject('E_Locale_Configuration_Error');
        }
        return result;
    });
}
exports.configureLocale = configureLocale;
function translate(key) {
    return diagnosticMessages[key];
}
exports.translate = translate;
function translateA(key, args) {
    let format = diagnosticMessages[key];
    return format.replace(/{(\d+)}/g, (_match, index) => '' + assertDefined(args[+index]));
}
exports.translateA = translateA;
function trySetLanguageAndTerritory(config, language, territory) {
    let filePath = path.join(config.directory, language);
    if (territory) {
        filePath = filePath + '-' + territory;
    }
    filePath = path.join(filePath, config.diagnosticFileName);
    return new Promise((resolve, reject) => {
        if (config.runtime === 'browser') {
            const request = new XMLHttpRequest();
            request.onreadystatechange = () => {
                if (request.readyState === XMLHttpRequest.DONE) {
                    if (request.status === 200) {
                        diagnosticMessages = JSON.parse(request.responseText);
                        return resolve(true);
                    }
                    else {
                        return resolve(false);
                    }
                }
            };
            request.open('GET', filePath, true);
            request.send();
        }
        else {
            if (!fs.existsSync(filePath)) {
                return resolve(false);
            }
            let fileContents = fs.readFileSync(filePath).toString();
            diagnosticMessages = JSON.parse(fileContents);
            resolve(true);
        }
    });
}
function assertDefined(value, message) {
    if (value === undefined || value === null) {
        throw new Error('E_Arg_Mismatch');
    }
    return value;
}
